openapi: 3.0.1
info:
  title: Bug Tracker
  description: This API provides endpoints for adding a bug, list the bugs, update a bug's information such as assignee and description and finally find a bug
  termsOfService: https://www.opensource.org/licenses/MIT
  contact:
    email: mehdi.yeganehparast@gmail.com
  license:
    name: MIT Licence
    url: https://opensource.org/licenses/MIT
  version: 1.0.0
servers:
  - url: http://localhost:8080/v1/
paths:
  /bug:
    put:
      summary: Update a bug
      operationId: updateBug
      requestBody:
        $ref: '#/components/requestBodies/BugRequestBody'
      responses:
        202:
          description: Item updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bug'
        400:
          description: Invalid input supplied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
      x-codegen-request-body-name: bug_body
    post:
      summary: Create a new bug
      operationId: createBug
      requestBody:
        $ref: '#/components/requestBodies/BugRequestBody'
      responses:
        201:
          description: Bug created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bug'
        400:
          description: Invalid input supplied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        404:
          description: Bug not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
      x-codegen-request-body-name: bug_body
    get:
      summary: list bugs
      operationId: listBugs
      responses:
        200:
          description: Input accepted for consuming by another processor
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArrayOfBugs"
        400:
          description: Invalid input supplied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        404:
          description: Bug not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
  /bug/assignee/{assigneeName}:
    get:
      summary: Find bugs by assignee name
      operationId: getBugByAssignee
      parameters:
        - name: assigneeName
          in: path
          description: The assignee name to be searched
          required: true
          example: 0
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArrayOfBugs"
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        404:
          description: Bug not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
  /bug/reporter/{reporterName}:
    get:
      summary: Find bugs by reporter name
      operationId: getBugByReporter
      parameters:
        - name: reporterName
          in: path
          description: The reporter name to be searched
          required: true
          example: 0
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArrayOfBugs"
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        404:
          description: Bug not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
  /bug/{bugId}:
    get:
      summary: Find bugs by bug id
      operationId: getBugById
      parameters:
        - name: bugId
          in: path
          description: The bug id name to be searched
          required: true
          example: 0
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bug'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        404:
          description: Bug not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
    delete:
      summary: delete a bug
      operationId: deleteBug
      parameters:
        - name: bugId
          in: path
          description: The bug id name to be deleted
          required: true
          example: 0
          schema:
            type: integer
            format: int64
      responses:
        204:
          description: successful delete
          content: { }
        400:
          description: Invalid input supplied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        404:
          description: Bug not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
  /bug/topic/{topic}:
    get:
      summary: Find bugs by topic
      operationId: getBugByTopic
      parameters:
        - name: topic
          in: path
          description: The topic name to be searched
          required: true
          example: 0
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArrayOfBugs"
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        404:
          description: Bug not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
  /bug/state/{state}:
    get:
      summary: Find bugs by state
      operationId: getBugByState
      parameters:
        - name: state
          in: path
          description: The state name to be searched
          required: true
          example: 0
          schema:
            type: string
            enum:
              - NEW
              - IN-PROGRESS
              - IN-REVIEW
              - DONE
            example: NEW
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfBugs'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        404:
          description: Bug not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
  /bug/history/{bugId}:
    get:
      summary: Find bug histories
      operationId: getBugHistory
      parameters:
        - name: bugId
          in: path
          description: The bugId to be searched in the histories
          required: true
          example: 0
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfHistory'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        404:
          description: Bug not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
components:
  schemas:
    Bug:
      required:
        - topic
        - description
        - reporter
      type: object
      properties:
        bugId:
          type: integer
          format: int64
          example: 1
        description:
          type: string
          example: some description related to the bug
        topic:
          type: string
          example: a topic
        assignee:
          description: a person who is gonna work on the bug
          $ref: "#/components/schemas/Person"
        reporter:
          description: a person who has found the bug
          $ref: "#/components/schemas/Person"
        state:
          description: The states which are defined for an bug
          type: string
          enum:
            - NEW
            - IN-PROGRESS
            - IN-REVIEW
            - DONE
          example: NEW
        created:
          description: The created timestamp
          type: string
          format: date-time
          example: "2022-07-27T08:00:00Z"
        updated:
          description: The updated timestamp
          type: string
          format: date-time
          example: "2022-07-27T08:00:00Z"
        assignees:
          description: list of assignees to this bug
          $ref: "#/components/schemas/ArrayOfPerson"
    Person:
      required:
        - fullName
        - email
      type: object
      properties:
        fullName:
          description: full name
          type: string
          example: John Smith
        email:
          description: email
          type: string
          format: email
          example: joe@example.com
    History:
      type: object
      properties:
        bug:
          description: bug
          $ref: "#/components/schemas/Bug"
        newValue:
          description: new stroed value
          type: string
        oldValue:
          description: old stored value
          type: string
        updated:
          description: time of update
          type: string
          format: date-time
    ArrayOfBugs:
      type: array
      items:
        $ref: "#/components/schemas/Bug"
    ArrayOfPerson:
      type: array
      items:
        $ref: "#/components/schemas/Person"
    ArrayOfHistory:
      type: array
      items:
        $ref: "#/components/schemas/History"
    ErrorMessage:
      type: object
      properties:
        statusCode:
          type: string
        message:
          type: string
        timestamp:
          type: string
          format: date-time
  requestBodies:
    BugRequestBody:
      description: A JSON object containing new bug's information
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Bug'
