/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.0.1).
 * https://openapi-generator.tech Do not edit the class manually.
 */
package com.bug.backend.api;

import com.bug.backend.dto.BugDTO;
import com.bug.backend.dto.ErrorMessageDTO;
import com.bug.backend.dto.HistoryDTO;
import com.bug.backend.exception.InvalidInputException;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import java.util.List;
import javax.annotation.Generated;
import javax.validation.Valid;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.Errors;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-08-02T12:34:37.943601+02:00[Europe/Berlin]")
@Validated
@Tag(name = "bug", description = "the bug API")
public interface BugApi {

  default BugApiDelegate getDelegate() {
    return new BugApiDelegate() {
    };
  }

  /**
   * POST /bug : Create a new bug
   *
   * @param bugBody A JSON object containing new bug&#39;s information (required)
   * @return Bug created (status code 201) or Invalid input supplied (status code 400) or Bug not
   * found (status code 404)
   */
  @Operation(
      operationId = "createBug",
      summary = "Create a new bug",
      responses = {
          @ApiResponse(responseCode = "201", description = "Bug created", content = {
              @Content(mediaType = "application/json", schema = @Schema(implementation = BugDTO.class))
          }),
          @ApiResponse(responseCode = "400", description = "Invalid input supplied", content = {
              @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessageDTO.class))
          }),
          @ApiResponse(responseCode = "404", description = "Bug not found", content = {
              @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessageDTO.class))
          })
      }
  )
  @RequestMapping(
      method = RequestMethod.POST,
      value = "/bug",
      produces = {"application/json"},
      consumes = {"application/json"}
  )
  default ResponseEntity<BugDTO> createBug(
      @Parameter(name = "bug_body", description = "A JSON object containing new bug's information", required = true) @Valid @RequestBody BugDTO bugBody
      , Errors errors
  ) {
    try {
      return getDelegate().createBug(bugBody);
    } catch (Exception e) {
      throw new InvalidInputException(String.format("%s:%s", errors.getFieldError().getField(),
          errors.getFieldError().getDefaultMessage()));
    }

  }


  /**
   * DELETE /bug/{bugId} : delete a bug
   *
   * @param bugId The bug id name to be deleted (required)
   * @return successful delete (status code 204) or Invalid input supplied (status code 400) or Bug
   * not found (status code 404)
   */
  @Operation(
      operationId = "deleteBug",
      summary = "delete a bug",
      responses = {
          @ApiResponse(responseCode = "204", description = "successful delete"),
          @ApiResponse(responseCode = "400", description = "Invalid input supplied", content = {
              @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessageDTO.class))
          }),
          @ApiResponse(responseCode = "404", description = "Bug not found", content = {
              @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessageDTO.class))
          })
      }
  )
  @RequestMapping(
      method = RequestMethod.DELETE,
      value = "/bug/{bugId}",
      produces = {"application/json"}
  )
  default ResponseEntity<Void> deleteBug(
      @Parameter(name = "bugId", description = "The bug id name to be deleted", required = true) @PathVariable("bugId") Long bugId
  ) {
    return getDelegate().deleteBug(bugId);
  }


  /**
   * GET /bug/assignee/{assigneeName} : Find bugs by assignee name
   *
   * @param assigneeName The assignee name to be searched (required)
   * @return successful operation (status code 200) or Invalid input (status code 400) or Bug not
   * found (status code 404)
   */
  @Operation(
      operationId = "getBugByAssignee",
      summary = "Find bugs by assignee name",
      responses = {
          @ApiResponse(responseCode = "200", description = "successful operation", content = {
              @Content(mediaType = "application/json", schema = @Schema(implementation = BugDTO.class))
          }),
          @ApiResponse(responseCode = "400", description = "Invalid input", content = {
              @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessageDTO.class))
          }),
          @ApiResponse(responseCode = "404", description = "Bug not found", content = {
              @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessageDTO.class))
          })
      }
  )
  @RequestMapping(
      method = RequestMethod.GET,
      value = "/bug/assignee/{assigneeName}",
      produces = {"application/json"}
  )
  default ResponseEntity<List<BugDTO>> getBugByAssignee(
      @Parameter(name = "assigneeName", description = "The assignee name to be searched", required = true) @PathVariable("assigneeName") @Valid String assigneeName
  ) {
    return getDelegate().getBugByAssignee(assigneeName);
  }


  /**
   * GET /bug/{bugId} : Find bugs by bug id
   *
   * @param bugId The bug id name to be searched (required)
   * @return successful operation (status code 200) or Invalid input (status code 400) or Bug not
   * found (status code 404)
   */
  @Operation(
      operationId = "getBugById",
      summary = "Find bugs by bug id",
      responses = {
          @ApiResponse(responseCode = "200", description = "successful operation", content = {
              @Content(mediaType = "application/json", schema = @Schema(implementation = BugDTO.class))
          }),
          @ApiResponse(responseCode = "400", description = "Invalid input", content = {
              @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessageDTO.class))
          }),
          @ApiResponse(responseCode = "404", description = "Bug not found", content = {
              @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessageDTO.class))
          })
      }
  )
  @RequestMapping(
      method = RequestMethod.GET,
      value = "/bug/{bugId}",
      produces = {"application/json"}
  )
  default ResponseEntity<BugDTO> getBugById(
      @Parameter(name = "bugId", description = "The bug id name to be searched", required = true) @PathVariable("bugId") Long bugId
  ) {
    return getDelegate().getBugById(bugId);
  }


  /**
   * GET /bug/reporter/{reporterName} : Find bugs by reporter name
   *
   * @param reporterName The reporter name to be searched (required)
   * @return successful operation (status code 200) or Invalid input (status code 400) or Bug not
   * found (status code 404)
   */
  @Operation(
      operationId = "getBugByReporter",
      summary = "Find bugs by reporter name",
      responses = {
          @ApiResponse(responseCode = "200", description = "successful operation", content = {
              @Content(mediaType = "application/json", schema = @Schema(implementation = BugDTO.class))
          }),
          @ApiResponse(responseCode = "400", description = "Invalid input", content = {
              @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessageDTO.class))
          }),
          @ApiResponse(responseCode = "404", description = "Bug not found", content = {
              @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessageDTO.class))
          })
      }
  )
  @RequestMapping(
      method = RequestMethod.GET,
      value = "/bug/reporter/{reporterName}",
      produces = {"application/json"}
  )
  default ResponseEntity<List<BugDTO>> getBugByReporter(
      @Parameter(name = "reporterName", description = "The reporter name to be searched", required = true) @PathVariable("reporterName") String reporterName
  ) {
    return getDelegate().getBugByReporter(reporterName);
  }


  /**
   * GET /bug/state/{state} : Find bugs by state
   *
   * @param state The state name to be searched (required)
   * @return successful operation (status code 200) or Invalid input (status code 400) or Bug not
   * found (status code 404)
   */
  @Operation(
      operationId = "getBugByState",
      summary = "Find bugs by state",
      responses = {
          @ApiResponse(responseCode = "200", description = "successful operation", content = {
              @Content(mediaType = "application/json", schema = @Schema(implementation = BugDTO.class))
          }),
          @ApiResponse(responseCode = "400", description = "Invalid input", content = {
              @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessageDTO.class))
          }),
          @ApiResponse(responseCode = "404", description = "Bug not found", content = {
              @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessageDTO.class))
          })
      }
  )
  @RequestMapping(
      method = RequestMethod.GET,
      value = "/bug/state/{state}",
      produces = {"application/json"}
  )
  default ResponseEntity<List<BugDTO>> getBugByState(
      @Parameter(name = "state", description = "The state name to be searched", required = true) @PathVariable("state") String state
      , Errors errors
  ) {
    try {
      return getDelegate().getBugByState(state);
    } catch (Exception e) {
      throw new InvalidInputException("invalid input");
    }
  }


  /**
   * GET /bug/topic/{topic} : Find bugs by topic
   *
   * @param topic The topic name to be searched (required)
   * @return successful operation (status code 200) or Invalid input (status code 400) or Bug not
   * found (status code 404)
   */
  @Operation(
      operationId = "getBugByTopic",
      summary = "Find bugs by topic",
      responses = {
          @ApiResponse(responseCode = "200", description = "successful operation", content = {
              @Content(mediaType = "application/json", schema = @Schema(implementation = BugDTO.class))
          }),
          @ApiResponse(responseCode = "400", description = "Invalid input", content = {
              @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessageDTO.class))
          }),
          @ApiResponse(responseCode = "404", description = "Bug not found", content = {
              @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessageDTO.class))
          })
      }
  )
  @RequestMapping(
      method = RequestMethod.GET,
      value = "/bug/topic/{topic}",
      produces = {"application/json"}
  )
  default ResponseEntity<List<BugDTO>> getBugByTopic(
      @Parameter(name = "topic", description = "The topic name to be searched", required = true) @PathVariable("topic") String topic
      , Errors errors
  ) {
    return getDelegate().getBugByTopic(topic);
  }


  /**
   * GET /bug/history/{bugId} : Find bug histories
   *
   * @param bugId The bugId to be searched in the histories (required)
   * @return successful operation (status code 200) or Invalid input (status code 400) or Bug not
   * found (status code 404)
   */
  @Operation(
      operationId = "getBugHistory",
      summary = "Find bug histories",
      responses = {
          @ApiResponse(responseCode = "200", description = "successful operation", content = {
              @Content(mediaType = "application/json", schema = @Schema(implementation = HistoryDTO.class))
          }),
          @ApiResponse(responseCode = "400", description = "Invalid input", content = {
              @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessageDTO.class))
          }),
          @ApiResponse(responseCode = "404", description = "Bug not found", content = {
              @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessageDTO.class))
          })
      }
  )
  @RequestMapping(
      method = RequestMethod.GET,
      value = "/bug/history/{bugId}",
      produces = {"application/json"}
  )
  default ResponseEntity<List<HistoryDTO>> getBugHistory(
      @Parameter(name = "bugId", description = "The bugId to be searched in the histories", required = true) @PathVariable("bugId") Long bugId
      , Errors errors
  ) {
    return getDelegate().getBugHistory(bugId);
  }


  /**
   * GET /bug : list bugs
   *
   * @return Input accepted for consuming by another processor (status code 200) or Invalid input
   * supplied (status code 400) or Bug not found (status code 404)
   */
  @Operation(
      operationId = "listBugs",
      summary = "list bugs",
      responses = {
          @ApiResponse(responseCode = "200", description = "Input accepted for consuming by another processor", content = {
              @Content(mediaType = "application/json", schema = @Schema(implementation = BugDTO.class))
          }),
          @ApiResponse(responseCode = "400", description = "Invalid input supplied", content = {
              @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessageDTO.class))
          }),
          @ApiResponse(responseCode = "404", description = "Bug not found", content = {
              @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessageDTO.class))
          })
      }
  )
  @RequestMapping(
      method = RequestMethod.GET,
      value = "/bug",
      produces = {"application/json"}
  )
  default ResponseEntity<List<BugDTO>> listBugs(
      Errors errors
  ) {
    return getDelegate().listBugs();
  }


  /**
   * PUT /bug : Update a bug
   *
   * @param bugBody A JSON object containing new bug&#39;s information (required)
   * @return Item updated (status code 202) or Invalid input supplied (status code 400)
   */
  @Operation(
      operationId = "updateBug",
      summary = "Update a bug",
      responses = {
          @ApiResponse(responseCode = "202", description = "Item updated", content = {
              @Content(mediaType = "application/json", schema = @Schema(implementation = BugDTO.class))
          }),
          @ApiResponse(responseCode = "400", description = "Invalid input supplied", content = {
              @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessageDTO.class))
          })
      }
  )
  @RequestMapping(
      method = RequestMethod.PUT,
      value = "/bug",
      produces = {"application/json"},
      consumes = {"application/json"}
  )
  default ResponseEntity<BugDTO> updateBug(
      @Parameter(name = "bug_body", description = "A JSON object containing new bug's information", required = true) @Valid @RequestBody BugDTO bugBody
      , Errors errors
  ) {
    return getDelegate().updateBug(bugBody);
  }

}
